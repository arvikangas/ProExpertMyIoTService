// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyIoTService.Infrastructure.EF;

namespace MyIoTService.Infrastructure.EF.Migrations
{
    [DbContext(typeof(MyIoTDbContext))]
    [Migration("20201115075350_AddDeviceData")]
    partial class AddDeviceData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("MyIoTService.Domain.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("MyIoTService.Domain.AccountDevice", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeviceId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AccountId", "DeviceId");

                    b.HasIndex("DeviceId");

                    b.ToTable("accountdevices");
                });

            modelBuilder.Entity("MyIoTService.Domain.DataType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RangeFrom")
                        .HasColumnType("int");

                    b.Property<int>("RangeTo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("datatypes");
                });

            modelBuilder.Entity("MyIoTService.Domain.Device", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("devices");
                });

            modelBuilder.Entity("MyIoTService.Domain.DeviceDataIncoming", b =>
                {
                    b.Property<string>("DeviceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("DeviceId", "TimeStamp", "DataTypeId");

                    b.HasIndex("DataTypeId");

                    b.ToTable("device_data_incoming");
                });

            modelBuilder.Entity("MyIoTService.Domain.DeviceDataOutgoing", b =>
                {
                    b.Property<string>("DeviceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("DeviceId", "TimeStamp", "DataTypeId");

                    b.HasIndex("DataTypeId");

                    b.ToTable("device_data_outgoing");
                });

            modelBuilder.Entity("MyIoTService.Domain.AccountDevice", b =>
                {
                    b.HasOne("MyIoTService.Domain.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyIoTService.Domain.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("MyIoTService.Domain.DeviceDataIncoming", b =>
                {
                    b.HasOne("MyIoTService.Domain.DataType", "DataType")
                        .WithMany()
                        .HasForeignKey("DataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyIoTService.Domain.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataType");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("MyIoTService.Domain.DeviceDataOutgoing", b =>
                {
                    b.HasOne("MyIoTService.Domain.DataType", "DataType")
                        .WithMany()
                        .HasForeignKey("DataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyIoTService.Domain.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataType");

                    b.Navigation("Device");
                });
#pragma warning restore 612, 618
        }
    }
}
